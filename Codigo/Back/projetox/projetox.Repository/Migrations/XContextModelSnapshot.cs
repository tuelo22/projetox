// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projetox.Repository;

#nullable disable

namespace projetox.Repository.Migrations
{
    [DbContext(typeof(XContext))]
    partial class XContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CanalDistribuicaoOpcaoPropostaValor", b =>
                {
                    b.Property<Guid>("CanalDistribuicaoOpcaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropostaValorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CanalDistribuicaoOpcaoId", "PropostaValorId");

                    b.HasIndex("PropostaValorId");

                    b.ToTable("CanalDistribuicaoOpcaoPropostaValor");
                });

            modelBuilder.Entity("UsuarioEmpresa", b =>
                {
                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UsuarioId", "EmpresaId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("UsuarioEmpresa");
                });

            modelBuilder.Entity("projetox.Domain.Autenticacao.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.CanalDistribuicao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CanalDistribuicaoOpcaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SegmentoClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CanalDistribuicaoOpcaoId");

                    b.HasIndex("SegmentoClienteId");

                    b.ToTable("CanalDistribuicao", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.CanalDistribuicaoOpcao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CanalDistribuicaoOpcao", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Abertura")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NaturezaJuridicaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Objetivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("QuantidadeFuncionario")
                        .HasColumnType("int");

                    b.Property<string>("URLSite")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("NaturezaJuridicaId");

                    b.ToTable("Empresa", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.FonteReceita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PropostaValorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropostaValorId");

                    b.ToTable("FonteReceita", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.NaturezaJuridica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("NaturezaJuridica", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43901ec4-5280-4359-938a-17131d12bab4"),
                            Descricao = "Empresa Pública"
                        },
                        new
                        {
                            Id = new Guid("4bb72039-04b0-4ff7-8aa5-f24e8200ef3f"),
                            Descricao = "Sociedade de Economia Mista"
                        },
                        new
                        {
                            Id = new Guid("9607b653-a127-4fe6-878c-b3c561f0273e"),
                            Descricao = "Sociedade Anônima Aberta"
                        },
                        new
                        {
                            Id = new Guid("f38ff09b-9690-43b3-ad6e-9aa8292bd89d"),
                            Descricao = "Sociedade Anônima Fechada"
                        },
                        new
                        {
                            Id = new Guid("b247d7c0-e3b7-45e8-9e4c-4b585cdfae02"),
                            Descricao = "Sociedade Empresária Limitada"
                        },
                        new
                        {
                            Id = new Guid("28bcf4fe-2d00-405c-9526-894ec4a98c73"),
                            Descricao = "Sociedade Empresária em Nome Coletivo"
                        },
                        new
                        {
                            Id = new Guid("15397572-53dd-44b9-9e58-f5a294435409"),
                            Descricao = "Sociedade Empresária em Comandita Simples"
                        },
                        new
                        {
                            Id = new Guid("4a6d5526-6e29-455a-8d8b-473db8e240e1"),
                            Descricao = "Sociedade Empresária em Comandita por Ações"
                        },
                        new
                        {
                            Id = new Guid("bf42566b-9bbc-48e8-ab72-762f52c4a1f9"),
                            Descricao = "Sociedade em Conta de Participação"
                        },
                        new
                        {
                            Id = new Guid("355680b7-c41e-4b5c-96c2-bbd4c1e64008"),
                            Descricao = "Empresário (Individual)"
                        },
                        new
                        {
                            Id = new Guid("1a5ed969-3799-4b3c-8a3e-d4cf126cf3b5"),
                            Descricao = "Cooperativa"
                        },
                        new
                        {
                            Id = new Guid("47162527-e243-43ae-a549-f50f668065c5"),
                            Descricao = "Consórcio de Sociedades"
                        },
                        new
                        {
                            Id = new Guid("9f0eb99d-9e58-4ed6-87ef-9faeb76e2108"),
                            Descricao = "Grupo de Sociedades"
                        },
                        new
                        {
                            Id = new Guid("17e90c7e-c94a-43fe-ad60-1b1dfd427394"),
                            Descricao = "Estabelecimento, no Brasil, de Sociedade Estrangeira"
                        },
                        new
                        {
                            Id = new Guid("d5806235-e473-42cf-b2e9-54cf20485dd2"),
                            Descricao = "Estabelecimento, no Brasil, de Empresa Binacional Argentino-Brasileira"
                        },
                        new
                        {
                            Id = new Guid("b8e83a01-fa2d-4646-be3b-ec9b72f61f59"),
                            Descricao = "Empresa Domiciliada no Exterior"
                        },
                        new
                        {
                            Id = new Guid("c212a935-a9c6-44d2-8a6d-762e9af349a4"),
                            Descricao = "Clube/Fundo de Investimento"
                        },
                        new
                        {
                            Id = new Guid("dcfe39ed-b8cb-464d-8f46-1df4b7a26702"),
                            Descricao = "Sociedade Simples Pura"
                        },
                        new
                        {
                            Id = new Guid("29cd40fc-77e5-47ce-af1a-905011b14019"),
                            Descricao = "Sociedade Simples Limitada"
                        },
                        new
                        {
                            Id = new Guid("8f99f41a-a5bb-4ebd-a8d9-ae3aef7eb0bf"),
                            Descricao = "Sociedade Simples em Nome Coletivo"
                        },
                        new
                        {
                            Id = new Guid("a71e4a73-1a54-48fa-a7b3-2de2e5df378a"),
                            Descricao = "Sociedade Simples em Comandita Simples"
                        },
                        new
                        {
                            Id = new Guid("d1c0b7a1-17be-416a-91a2-399495a40ef1"),
                            Descricao = "Empresa Binacional"
                        },
                        new
                        {
                            Id = new Guid("80c58748-9233-4296-87f4-760ee651170f"),
                            Descricao = "Consórcio de Empregadores"
                        },
                        new
                        {
                            Id = new Guid("1a0013f5-7b82-4faa-9be6-06bd7fc4685b"),
                            Descricao = "Consórcio Simples"
                        },
                        new
                        {
                            Id = new Guid("b3b224ed-dfe6-43b8-94a4-6d4d0dcbdff3"),
                            Descricao = "Empresa Individual de Responsabilidade Limitada (de Natureza Empresária)"
                        },
                        new
                        {
                            Id = new Guid("579a04e3-1e87-4425-a7be-296f7acdcd82"),
                            Descricao = "Empresa Individual de Responsabilidade Limitada (de Natureza Simples)"
                        },
                        new
                        {
                            Id = new Guid("f7b09c55-4e62-4497-beca-b3c934474ff0"),
                            Descricao = "Sociedade Unipessoal de Advogados"
                        },
                        new
                        {
                            Id = new Guid("3dbb6269-5e93-4de1-aae3-4c1271c25bb1"),
                            Descricao = "Cooperativas de Consumo"
                        },
                        new
                        {
                            Id = new Guid("679b7199-376e-45b3-8751-192c0918c4f3"),
                            Descricao = "Empresa Simples de Inovação - Inova Simples"
                        },
                        new
                        {
                            Id = new Guid("5cba0a40-197e-4eed-8d5c-20ea7264edf2"),
                            Descricao = "Investidor Não Residente"
                        },
                        new
                        {
                            Id = new Guid("1283b4cc-7b04-4411-acef-e53e7c37849a"),
                            Descricao = "Serviço Notarial e Registral (Cartório)"
                        },
                        new
                        {
                            Id = new Guid("551b5847-f241-471d-81e9-60a36cbfe5f6"),
                            Descricao = "Fundação Privada"
                        },
                        new
                        {
                            Id = new Guid("a8b6ada3-1bf7-4ecf-9b48-636a9ee280d3"),
                            Descricao = "Serviço Social Autônomo"
                        },
                        new
                        {
                            Id = new Guid("9ef1ef54-9bd2-44fb-be91-c9b094a325e8"),
                            Descricao = "Condomínio Edilício"
                        },
                        new
                        {
                            Id = new Guid("19698aa0-01bf-4a72-9571-7f0515abf9ae"),
                            Descricao = "Comissão de Conciliação Prévia"
                        },
                        new
                        {
                            Id = new Guid("69011011-dafc-4444-8b62-c9e5b5ef928d"),
                            Descricao = "Entidade de Mediação e Arbitragem"
                        },
                        new
                        {
                            Id = new Guid("9b0e12ff-e0de-4130-96ef-1a9aad9f2737"),
                            Descricao = "Entidade Sindical"
                        },
                        new
                        {
                            Id = new Guid("3dd12bfb-0e03-4a6c-a1b1-29d05e438269"),
                            Descricao = "Estabelecimento, no Brasil, de Fundação ou Associação Estrangeiras"
                        },
                        new
                        {
                            Id = new Guid("99747e3f-ae5b-4294-bdcd-466947c635fc"),
                            Descricao = "Fundação ou Associação Domiciliada no Exterior"
                        },
                        new
                        {
                            Id = new Guid("2c8fce41-e555-49c3-8c11-1f411b3eb046"),
                            Descricao = "Organização Religiosa"
                        },
                        new
                        {
                            Id = new Guid("5f4887b5-5da5-4a2a-8335-2c9dc4229b70"),
                            Descricao = "Comunidade Indígena"
                        },
                        new
                        {
                            Id = new Guid("36864349-8342-4996-8f4b-6176fb33dfb7"),
                            Descricao = "Fundo Privado"
                        },
                        new
                        {
                            Id = new Guid("df877078-12a4-4bcb-bf70-f525ee70ca86"),
                            Descricao = "Órgão de Direção Nacional de Partido Político"
                        },
                        new
                        {
                            Id = new Guid("b48dcd3f-40ad-4ba8-8835-88521339e6aa"),
                            Descricao = "Órgão de Direção Regional de Partido Político"
                        },
                        new
                        {
                            Id = new Guid("f524aeea-6c5a-4b69-a490-2571b300fd71"),
                            Descricao = "Órgão de Direção Local de Partido Político"
                        },
                        new
                        {
                            Id = new Guid("b99b1fb8-43bf-4462-a3ce-672e1486b4a4"),
                            Descricao = "Comitê Financeiro de Partido Político"
                        },
                        new
                        {
                            Id = new Guid("b268688a-cea0-4fed-8c8c-b673cbd696ce"),
                            Descricao = "Frente Plebiscitária ou Referendária"
                        },
                        new
                        {
                            Id = new Guid("cc668439-fb4d-433c-901c-6c145f667aa9"),
                            Descricao = "Organização Social (OS)"
                        },
                        new
                        {
                            Id = new Guid("e9e4cccd-7e32-4d91-9690-e950a08b8257"),
                            Descricao = "Demais Condomínios"
                        },
                        new
                        {
                            Id = new Guid("1e9bbf9e-f759-41fe-af7c-ba3cafe3ba4a"),
                            Descricao = "Plano de Benefícios de Previdência Complementar Fechada"
                        },
                        new
                        {
                            Id = new Guid("95a33b2e-a248-4cc5-bcd9-93a51d6002b1"),
                            Descricao = "Associação Privada"
                        },
                        new
                        {
                            Id = new Guid("3c22d7ae-a78b-47e2-a138-31a14919d0bb"),
                            Descricao = "Empresa Individual Imobiliária"
                        },
                        new
                        {
                            Id = new Guid("590ba686-dbb4-4cc4-adf8-dacfc377e818"),
                            Descricao = "Segurado Especial"
                        },
                        new
                        {
                            Id = new Guid("368149ef-bd5c-458e-b975-37d9e760c0fd"),
                            Descricao = "Contribuinte individual"
                        },
                        new
                        {
                            Id = new Guid("19715ff7-72f3-465c-be9f-e96dc3129cd6"),
                            Descricao = "Candidato a Cargo Político Eletivo"
                        },
                        new
                        {
                            Id = new Guid("04a6882e-5d43-430b-abf1-d7a829424f84"),
                            Descricao = "Leiloeiro"
                        },
                        new
                        {
                            Id = new Guid("b23e6882-fd24-433b-8e33-50f6ef300475"),
                            Descricao = "Produtor Rural (Pessoa Física)"
                        });
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.PropostaValor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescricaoNegocio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FazerNegocio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("PropostaValor", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.RedeSocial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("URLPerfil")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("RedeSocial", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.RelacionamentoCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PropostaValorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropostaValorId");

                    b.ToTable("RelacionamentoCliente", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoAjudarPessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SegmentoClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SegmentoClienteId");

                    b.ToTable("SegmentoAjudarPessoa", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoBuscarEmpresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SegmentoClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SegmentoClienteId");

                    b.ToTable("SegmentoBuscarEmpresa", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ajudar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BuscarProduto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ClienteDispostoPagar")
                        .HasColumnType("int");

                    b.Property<Guid>("PropostaValorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServindoPessoa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PropostaValorId");

                    b.ToTable("SegmentoCliente", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoReclamacaoAtendimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SegmentoClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SegmentoClienteId");

                    b.ToTable("SegmentoReclamacaoAtendimento", (string)null);
                });

            modelBuilder.Entity("CanalDistribuicaoOpcaoPropostaValor", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.CanalDistribuicaoOpcao", null)
                        .WithMany()
                        .HasForeignKey("CanalDistribuicaoOpcaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projetox.Domain.Core.Entidades.PropostaValor", null)
                        .WithMany()
                        .HasForeignKey("PropostaValorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsuarioEmpresa", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.Empresa", null)
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projetox.Domain.Autenticacao.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projetox.Domain.Autenticacao.Entidades.Usuario", b =>
                {
                    b.OwnsOne("projetox.Domain.Base.ValueObjects.Documento", "Documento", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("projetox.Domain.Core.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("projetox.Domain.Autenticacao.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Confirmado")
                                .HasColumnType("bit");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("projetox.Domain.Autenticacao.ValueObjects.Nome", "Nome", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("PrimeiroNome")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Sobrenome")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("projetox.Domain.Autenticacao.ValueObjects.Senha", "Senha", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("Documento")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Nome")
                        .IsRequired();

                    b.Navigation("Senha")
                        .IsRequired();

                    b.Navigation("Telefone")
                        .IsRequired();
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.CanalDistribuicao", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.CanalDistribuicaoOpcao", "CanalDistribuicaoOpcao")
                        .WithMany("CanaisDistribuicao")
                        .HasForeignKey("CanalDistribuicaoOpcaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projetox.Domain.Core.Entidades.SegmentoCliente", "SegmentoCliente")
                        .WithMany()
                        .HasForeignKey("SegmentoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CanalDistribuicaoOpcao");

                    b.Navigation("SegmentoCliente");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.Empresa", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.NaturezaJuridica", "NaturezaJuridica")
                        .WithMany("Empresas")
                        .HasForeignKey("NaturezaJuridicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("projetox.Domain.Base.ValueObjects.Documento", "Documento", b1 =>
                        {
                            b1.Property<Guid>("EmpresaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("Empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.OwnsOne("projetox.Domain.Core.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("EmpresaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("Empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.OwnsOne("projetox.Domain.Core.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("EmpresaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("CEP")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("CodIBGE")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("Complemento")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("Empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.Navigation("Documento")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("NaturezaJuridica");

                    b.Navigation("Telefone")
                        .IsRequired();
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.FonteReceita", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.PropostaValor", "PropostaValor")
                        .WithMany("FontesReceita")
                        .HasForeignKey("PropostaValorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropostaValor");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.PropostaValor", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.Empresa", "Empresa")
                        .WithMany("PropostasValor")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.RedeSocial", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.Empresa", "Empresa")
                        .WithMany("RedesSociais")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.RelacionamentoCliente", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.PropostaValor", "PropostaValor")
                        .WithMany("RelacionamentoClientes")
                        .HasForeignKey("PropostaValorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropostaValor");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoAjudarPessoa", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.SegmentoCliente", "SegmentoCliente")
                        .WithMany("SegmentoAjudarPessoas")
                        .HasForeignKey("SegmentoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SegmentoCliente");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoBuscarEmpresa", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.SegmentoCliente", "SegmentoCliente")
                        .WithMany("SegmentoBuscarEmpresas")
                        .HasForeignKey("SegmentoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SegmentoCliente");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoCliente", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.PropostaValor", "PropostaValor")
                        .WithMany("SegmentosClientes")
                        .HasForeignKey("PropostaValorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("projetox.Domain.Core.ValueObjects.Monetario", "Valor", b1 =>
                        {
                            b1.Property<Guid>("SegmentoClienteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("SegmentoClienteId");

                            b1.ToTable("SegmentoCliente");

                            b1.WithOwner()
                                .HasForeignKey("SegmentoClienteId");
                        });

                    b.Navigation("PropostaValor");

                    b.Navigation("Valor")
                        .IsRequired();
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoReclamacaoAtendimento", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.SegmentoCliente", "SegmentoCliente")
                        .WithMany("SegmentoReclamacaoAtendimentos")
                        .HasForeignKey("SegmentoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SegmentoCliente");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.CanalDistribuicaoOpcao", b =>
                {
                    b.Navigation("CanaisDistribuicao");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.Empresa", b =>
                {
                    b.Navigation("PropostasValor");

                    b.Navigation("RedesSociais");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.NaturezaJuridica", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.PropostaValor", b =>
                {
                    b.Navigation("FontesReceita");

                    b.Navigation("RelacionamentoClientes");

                    b.Navigation("SegmentosClientes");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoCliente", b =>
                {
                    b.Navigation("SegmentoAjudarPessoas");

                    b.Navigation("SegmentoBuscarEmpresas");

                    b.Navigation("SegmentoReclamacaoAtendimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
