// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projetox.Repository;

#nullable disable

namespace projetox.Repository.Migrations
{
    [DbContext(typeof(XContext))]
    [Migration("20240412022236_002")]
    partial class _002
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CanalDistribuicaoOpcaoPropostaValor", b =>
                {
                    b.Property<Guid>("CanalDistribuicaoOpcaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropostaValorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CanalDistribuicaoOpcaoId", "PropostaValorId");

                    b.HasIndex("PropostaValorId");

                    b.ToTable("CanalDistribuicaoOpcaoPropostaValor");
                });

            modelBuilder.Entity("EmpresaUsuario", b =>
                {
                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmpresasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuariosId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmpresaId", "UsuarioId");

                    b.HasIndex("EmpresasId");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("EmpresaUsuario");
                });

            modelBuilder.Entity("projetox.Domain.Autenticacao.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.CanalDistribuicao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CanalDistribuicaoOpcaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SegmentoClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CanalDistribuicaoOpcaoId");

                    b.HasIndex("SegmentoClienteId");

                    b.ToTable("CanalDistribuicao", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.CanalDistribuicaoOpcao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CanalDistribuicaoOpcao", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Abertura")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NaturezaJuridicaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Objetivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("QuantidadeFuncionario")
                        .HasColumnType("int");

                    b.Property<string>("URLSite")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("NaturezaJuridicaId");

                    b.ToTable("Empresa", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.FonteReceita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PropostaValorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropostaValorId");

                    b.ToTable("FonteReceita", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.NaturezaJuridica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("NaturezaJuridica", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("83244725-1f3d-4607-8e9c-0a517c0cf281"),
                            Descricao = "Empresa Pública"
                        },
                        new
                        {
                            Id = new Guid("7737b2de-cc3c-4372-92ad-853125d66d6e"),
                            Descricao = "Sociedade de Economia Mista"
                        },
                        new
                        {
                            Id = new Guid("cf401b36-d069-4454-9dc7-7630eacf54f2"),
                            Descricao = "Sociedade Anônima Aberta"
                        },
                        new
                        {
                            Id = new Guid("51a9c67b-6243-4fbd-9ece-2a825c1cfb5a"),
                            Descricao = "Sociedade Anônima Fechada"
                        },
                        new
                        {
                            Id = new Guid("6f68ad5b-0232-4874-9a0e-970bbd60219d"),
                            Descricao = "Sociedade Empresária Limitada"
                        },
                        new
                        {
                            Id = new Guid("02d0464f-99b6-4533-9bd5-16d552a34833"),
                            Descricao = "Sociedade Empresária em Nome Coletivo"
                        },
                        new
                        {
                            Id = new Guid("214817d8-aaf6-4765-8967-0b097a6b3090"),
                            Descricao = "Sociedade Empresária em Comandita Simples"
                        },
                        new
                        {
                            Id = new Guid("5b0bc486-4efb-42b3-aa08-47d43f38cbe0"),
                            Descricao = "Sociedade Empresária em Comandita por Ações"
                        },
                        new
                        {
                            Id = new Guid("12978b06-3e34-423e-b89f-bbc0d4a5eead"),
                            Descricao = "Sociedade em Conta de Participação"
                        },
                        new
                        {
                            Id = new Guid("cb8d37d2-e471-46a4-9e19-606a9b5d6ef0"),
                            Descricao = "Empresário (Individual)"
                        },
                        new
                        {
                            Id = new Guid("600ff2c9-965e-447e-948d-f9d5cd1075f8"),
                            Descricao = "Cooperativa"
                        },
                        new
                        {
                            Id = new Guid("31d27c53-00e8-4555-b4cb-9744def95281"),
                            Descricao = "Consórcio de Sociedades"
                        },
                        new
                        {
                            Id = new Guid("e239ee6f-8b6a-4f78-92f4-a6c94d2428bb"),
                            Descricao = "Grupo de Sociedades"
                        },
                        new
                        {
                            Id = new Guid("b6564961-b3f6-4eb2-965c-b62f5f596a82"),
                            Descricao = "Estabelecimento, no Brasil, de Sociedade Estrangeira"
                        },
                        new
                        {
                            Id = new Guid("0b83bfba-2aab-4a84-8673-5200651d7969"),
                            Descricao = "Estabelecimento, no Brasil, de Empresa Binacional Argentino-Brasileira"
                        },
                        new
                        {
                            Id = new Guid("78999c7d-ca99-44d9-aa82-81300e0d685e"),
                            Descricao = "Empresa Domiciliada no Exterior"
                        },
                        new
                        {
                            Id = new Guid("0503466a-6950-490f-bc83-c3ad4290b4f6"),
                            Descricao = "Clube/Fundo de Investimento"
                        },
                        new
                        {
                            Id = new Guid("fb74e7c9-8a23-4709-846e-6792590932be"),
                            Descricao = "Sociedade Simples Pura"
                        },
                        new
                        {
                            Id = new Guid("4c42d252-37d2-460e-883b-593a285acc78"),
                            Descricao = "Sociedade Simples Limitada"
                        },
                        new
                        {
                            Id = new Guid("3cdd55cb-1d23-4362-bf27-ccc60b7de337"),
                            Descricao = "Sociedade Simples em Nome Coletivo"
                        },
                        new
                        {
                            Id = new Guid("fa2f3a8b-0a9d-4166-8d9e-f575276f063b"),
                            Descricao = "Sociedade Simples em Comandita Simples"
                        },
                        new
                        {
                            Id = new Guid("a9376496-19f8-4fbf-b7c3-45a43bbe8b31"),
                            Descricao = "Empresa Binacional"
                        },
                        new
                        {
                            Id = new Guid("20cf1af8-a173-4ed3-ac81-46e5aaf5ae42"),
                            Descricao = "Consórcio de Empregadores"
                        },
                        new
                        {
                            Id = new Guid("dab515e6-182e-4c1f-b3ae-32c117677463"),
                            Descricao = "Consórcio Simples"
                        },
                        new
                        {
                            Id = new Guid("2664dcd6-82bb-4b04-828d-418c242f802b"),
                            Descricao = "Empresa Individual de Responsabilidade Limitada (de Natureza Empresária)"
                        },
                        new
                        {
                            Id = new Guid("e129505a-0987-485d-ae4d-82f47960d171"),
                            Descricao = "Empresa Individual de Responsabilidade Limitada (de Natureza Simples)"
                        },
                        new
                        {
                            Id = new Guid("1aac0557-646b-47f1-8d69-31f35ba30d7a"),
                            Descricao = "Sociedade Unipessoal de Advogados"
                        },
                        new
                        {
                            Id = new Guid("010f3e97-2a06-4116-95d1-33c5ffc32e68"),
                            Descricao = "Cooperativas de Consumo"
                        },
                        new
                        {
                            Id = new Guid("8c31af3c-5fbf-4a66-89f6-4e1607e177ef"),
                            Descricao = "Empresa Simples de Inovação - Inova Simples"
                        },
                        new
                        {
                            Id = new Guid("ff177aee-cbc0-438f-ab43-203a65fd7be6"),
                            Descricao = "Investidor Não Residente"
                        },
                        new
                        {
                            Id = new Guid("3d6464e5-de8e-4a81-8e61-33ed31f33487"),
                            Descricao = "Serviço Notarial e Registral (Cartório)"
                        },
                        new
                        {
                            Id = new Guid("e03f6133-ee08-4315-a78d-52094edbe983"),
                            Descricao = "Fundação Privada"
                        },
                        new
                        {
                            Id = new Guid("be19c5b0-e8e3-4e06-8362-aa41d0e34447"),
                            Descricao = "Serviço Social Autônomo"
                        },
                        new
                        {
                            Id = new Guid("2076ed25-0410-4e9a-ba01-326b4cd0f66b"),
                            Descricao = "Condomínio Edilício"
                        },
                        new
                        {
                            Id = new Guid("e84b9aba-6df9-4a55-b3c4-f9e9f02e1712"),
                            Descricao = "Comissão de Conciliação Prévia"
                        },
                        new
                        {
                            Id = new Guid("006e3b54-ef4a-426b-ae82-7c4e5bfd908b"),
                            Descricao = "Entidade de Mediação e Arbitragem"
                        },
                        new
                        {
                            Id = new Guid("b43fdab4-abe3-4429-8f09-022ff908129d"),
                            Descricao = "Entidade Sindical"
                        },
                        new
                        {
                            Id = new Guid("27989b1f-dad5-42a2-948b-78bc1cada243"),
                            Descricao = "Estabelecimento, no Brasil, de Fundação ou Associação Estrangeiras"
                        },
                        new
                        {
                            Id = new Guid("bf107ba0-80a7-4d2c-86e0-b674b4a557f1"),
                            Descricao = "Fundação ou Associação Domiciliada no Exterior"
                        },
                        new
                        {
                            Id = new Guid("5c181b05-d28f-4808-93b4-fe8a998c3133"),
                            Descricao = "Organização Religiosa"
                        },
                        new
                        {
                            Id = new Guid("946115cb-c669-4099-b3e3-11ba546190ff"),
                            Descricao = "Comunidade Indígena"
                        },
                        new
                        {
                            Id = new Guid("105713c6-75ad-4964-8f93-eef899d7ea8f"),
                            Descricao = "Fundo Privado"
                        },
                        new
                        {
                            Id = new Guid("f865effe-3d44-4d88-b7e0-7f9e9539a5d8"),
                            Descricao = "Órgão de Direção Nacional de Partido Político"
                        },
                        new
                        {
                            Id = new Guid("b2e905a3-62ec-44d7-bf0b-bcdcbdf643f1"),
                            Descricao = "Órgão de Direção Regional de Partido Político"
                        },
                        new
                        {
                            Id = new Guid("0fb0258a-05f5-4ec7-8c71-baa21a945709"),
                            Descricao = "Órgão de Direção Local de Partido Político"
                        },
                        new
                        {
                            Id = new Guid("e0c8bb2a-4d84-4816-83c6-69b476263ee0"),
                            Descricao = "Comitê Financeiro de Partido Político"
                        },
                        new
                        {
                            Id = new Guid("b912f542-ffcf-49c8-aeb5-582f6b0c41dd"),
                            Descricao = "Frente Plebiscitária ou Referendária"
                        },
                        new
                        {
                            Id = new Guid("1ccff087-9d80-49ae-a41c-24677e87a26f"),
                            Descricao = "Organização Social (OS)"
                        },
                        new
                        {
                            Id = new Guid("bab30284-6a94-4f71-8ab8-7c536cd5cffa"),
                            Descricao = "Demais Condomínios"
                        },
                        new
                        {
                            Id = new Guid("d7819591-d266-44ea-8e97-e291b65e81b0"),
                            Descricao = "Plano de Benefícios de Previdência Complementar Fechada"
                        },
                        new
                        {
                            Id = new Guid("50c5dabb-996a-4bcd-abbd-1501ce6e3981"),
                            Descricao = "Associação Privada"
                        },
                        new
                        {
                            Id = new Guid("8afc62ac-48b2-4fe6-ba17-d7618f956ba6"),
                            Descricao = "Empresa Individual Imobiliária"
                        },
                        new
                        {
                            Id = new Guid("6f3d17c7-83cd-43c0-8e54-fec18d258c44"),
                            Descricao = "Segurado Especial"
                        },
                        new
                        {
                            Id = new Guid("55abc785-da69-472c-8db4-ebd26eef795c"),
                            Descricao = "Contribuinte individual"
                        },
                        new
                        {
                            Id = new Guid("0a7dcb32-5230-4f83-bb54-57328c8e8ece"),
                            Descricao = "Candidato a Cargo Político Eletivo"
                        },
                        new
                        {
                            Id = new Guid("1e135128-2fce-45dc-96c7-5abdb350c26a"),
                            Descricao = "Leiloeiro"
                        },
                        new
                        {
                            Id = new Guid("8c708251-0351-409d-83b5-9647e430c90c"),
                            Descricao = "Produtor Rural (Pessoa Física)"
                        });
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.PropostaValor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescricaoNegocio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FazerNegocio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("PropostaValor", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.RedeSocial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("URLPerfil")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("RedeSocial", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.RelacionamentoCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PropostaValorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropostaValorId");

                    b.ToTable("RelacionamentoCliente", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoAjudarPessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SegmentoClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SegmentoClienteId");

                    b.ToTable("SegmentoAjudarPessoa", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoBuscarEmpresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SegmentoClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SegmentoClienteId");

                    b.ToTable("SegmentoBuscarEmpresa", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ajudar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BuscarProduto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ClienteDispostoPagar")
                        .HasColumnType("int");

                    b.Property<Guid>("PropostaValorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServindoPessoa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PropostaValorId");

                    b.ToTable("SegmentoCliente", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoReclamacaoAtendimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SegmentoClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SegmentoClienteId");

                    b.ToTable("SegmentoReclamacaoAtendimento", (string)null);
                });

            modelBuilder.Entity("CanalDistribuicaoOpcaoPropostaValor", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.CanalDistribuicaoOpcao", null)
                        .WithMany()
                        .HasForeignKey("CanalDistribuicaoOpcaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projetox.Domain.Core.Entidades.PropostaValor", null)
                        .WithMany()
                        .HasForeignKey("PropostaValorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmpresaUsuario", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.Empresa", null)
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("projetox.Domain.Core.Entidades.Empresa", null)
                        .WithMany()
                        .HasForeignKey("EmpresasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projetox.Domain.Autenticacao.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("projetox.Domain.Autenticacao.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projetox.Domain.Autenticacao.Entidades.Usuario", b =>
                {
                    b.OwnsOne("projetox.Domain.Base.ValueObjects.Documento", "Documento", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("projetox.Domain.Core.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("projetox.Domain.Autenticacao.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Confirmado")
                                .HasColumnType("bit");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("projetox.Domain.Autenticacao.ValueObjects.Nome", "Nome", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("PrimeiroNome")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Sobrenome")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("projetox.Domain.Autenticacao.ValueObjects.Senha", "Senha", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("Documento")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Nome")
                        .IsRequired();

                    b.Navigation("Senha")
                        .IsRequired();

                    b.Navigation("Telefone")
                        .IsRequired();
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.CanalDistribuicao", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.CanalDistribuicaoOpcao", "CanalDistribuicaoOpcao")
                        .WithMany("CanaisDistribuicao")
                        .HasForeignKey("CanalDistribuicaoOpcaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projetox.Domain.Core.Entidades.SegmentoCliente", "SegmentoCliente")
                        .WithMany()
                        .HasForeignKey("SegmentoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CanalDistribuicaoOpcao");

                    b.Navigation("SegmentoCliente");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.Empresa", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.NaturezaJuridica", "NaturezaJuridica")
                        .WithMany("Empresas")
                        .HasForeignKey("NaturezaJuridicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("projetox.Domain.Base.ValueObjects.Documento", "Documento", b1 =>
                        {
                            b1.Property<Guid>("EmpresaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("Empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.OwnsOne("projetox.Domain.Core.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("EmpresaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("Empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.OwnsOne("projetox.Domain.Core.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("EmpresaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("CEP")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("CodIBGE")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("Complemento")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("Empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.Navigation("Documento")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("NaturezaJuridica");

                    b.Navigation("Telefone")
                        .IsRequired();
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.FonteReceita", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.PropostaValor", "PropostaValor")
                        .WithMany("FontesReceita")
                        .HasForeignKey("PropostaValorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropostaValor");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.PropostaValor", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.Empresa", "Empresa")
                        .WithMany("PropostasValor")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.RedeSocial", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.Empresa", "Empresa")
                        .WithMany("RedesSociais")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.RelacionamentoCliente", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.PropostaValor", "PropostaValor")
                        .WithMany("RelacionamentoClientes")
                        .HasForeignKey("PropostaValorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropostaValor");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoAjudarPessoa", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.SegmentoCliente", "SegmentoCliente")
                        .WithMany("SegmentoAjudarPessoas")
                        .HasForeignKey("SegmentoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SegmentoCliente");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoBuscarEmpresa", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.SegmentoCliente", "SegmentoCliente")
                        .WithMany("SegmentoBuscarEmpresas")
                        .HasForeignKey("SegmentoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SegmentoCliente");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoCliente", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.PropostaValor", "PropostaValor")
                        .WithMany("SegmentosClientes")
                        .HasForeignKey("PropostaValorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("projetox.Domain.Core.ValueObjects.Monetario", "Valor", b1 =>
                        {
                            b1.Property<Guid>("SegmentoClienteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("SegmentoClienteId");

                            b1.ToTable("SegmentoCliente");

                            b1.WithOwner()
                                .HasForeignKey("SegmentoClienteId");
                        });

                    b.Navigation("PropostaValor");

                    b.Navigation("Valor")
                        .IsRequired();
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoReclamacaoAtendimento", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.SegmentoCliente", "SegmentoCliente")
                        .WithMany("SegmentoReclamacaoAtendimentos")
                        .HasForeignKey("SegmentoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SegmentoCliente");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.CanalDistribuicaoOpcao", b =>
                {
                    b.Navigation("CanaisDistribuicao");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.Empresa", b =>
                {
                    b.Navigation("PropostasValor");

                    b.Navigation("RedesSociais");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.NaturezaJuridica", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.PropostaValor", b =>
                {
                    b.Navigation("FontesReceita");

                    b.Navigation("RelacionamentoClientes");

                    b.Navigation("SegmentosClientes");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoCliente", b =>
                {
                    b.Navigation("SegmentoAjudarPessoas");

                    b.Navigation("SegmentoBuscarEmpresas");

                    b.Navigation("SegmentoReclamacaoAtendimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
