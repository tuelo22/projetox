// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projetox.Repository;

#nullable disable

namespace projetox.Repository.Migrations
{
    [DbContext(typeof(XContext))]
    [Migration("20240412031844_001")]
    partial class _001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CanalDistribuicaoOpcaoPropostaValor", b =>
                {
                    b.Property<Guid>("CanalDistribuicaoOpcaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropostaValorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CanalDistribuicaoOpcaoId", "PropostaValorId");

                    b.HasIndex("PropostaValorId");

                    b.ToTable("CanalDistribuicaoOpcaoPropostaValor");
                });

            modelBuilder.Entity("UsuarioEmpresa", b =>
                {
                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UsuarioId", "EmpresaId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("UsuarioEmpresa");
                });

            modelBuilder.Entity("projetox.Domain.Autenticacao.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.CanalDistribuicao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CanalDistribuicaoOpcaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SegmentoClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CanalDistribuicaoOpcaoId");

                    b.HasIndex("SegmentoClienteId");

                    b.ToTable("CanalDistribuicao", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.CanalDistribuicaoOpcao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CanalDistribuicaoOpcao", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Abertura")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NaturezaJuridicaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Objetivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("QuantidadeFuncionario")
                        .HasColumnType("int");

                    b.Property<string>("URLSite")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("NaturezaJuridicaId");

                    b.ToTable("Empresa", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.FonteReceita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PropostaValorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropostaValorId");

                    b.ToTable("FonteReceita", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.NaturezaJuridica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("NaturezaJuridica", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e112209a-7af8-4c07-b8d9-62f70d0375dd"),
                            Descricao = "Empresa Pública"
                        },
                        new
                        {
                            Id = new Guid("67bdcecb-33e3-452b-bfc4-bfea1f7d0b73"),
                            Descricao = "Sociedade de Economia Mista"
                        },
                        new
                        {
                            Id = new Guid("6c0462c4-cc19-4c4f-be0f-211b64cd9145"),
                            Descricao = "Sociedade Anônima Aberta"
                        },
                        new
                        {
                            Id = new Guid("e9d4d27b-73da-44f5-8de7-adda78b4f0ee"),
                            Descricao = "Sociedade Anônima Fechada"
                        },
                        new
                        {
                            Id = new Guid("9a974541-b379-45f3-8955-e7486e42cc00"),
                            Descricao = "Sociedade Empresária Limitada"
                        },
                        new
                        {
                            Id = new Guid("1520cfa9-b0e2-4566-ab25-14c2f56cdc84"),
                            Descricao = "Sociedade Empresária em Nome Coletivo"
                        },
                        new
                        {
                            Id = new Guid("3fef395a-9c71-40e3-8ac0-d90309a96218"),
                            Descricao = "Sociedade Empresária em Comandita Simples"
                        },
                        new
                        {
                            Id = new Guid("77100271-c89f-42b5-b463-61371b4deed3"),
                            Descricao = "Sociedade Empresária em Comandita por Ações"
                        },
                        new
                        {
                            Id = new Guid("dcb0eb5b-fad7-4af7-8d15-b2eb9a219731"),
                            Descricao = "Sociedade em Conta de Participação"
                        },
                        new
                        {
                            Id = new Guid("6892b42f-15a7-408d-9ac3-8eff65c97346"),
                            Descricao = "Empresário (Individual)"
                        },
                        new
                        {
                            Id = new Guid("0f738818-940f-4f66-8382-82577bea9f3d"),
                            Descricao = "Cooperativa"
                        },
                        new
                        {
                            Id = new Guid("88528675-0737-4d01-9d74-f551334c98a2"),
                            Descricao = "Consórcio de Sociedades"
                        },
                        new
                        {
                            Id = new Guid("dee365e6-1c93-424f-b882-a0100c167550"),
                            Descricao = "Grupo de Sociedades"
                        },
                        new
                        {
                            Id = new Guid("6fed5d6b-8128-4d5a-ae57-49078bb388a6"),
                            Descricao = "Estabelecimento, no Brasil, de Sociedade Estrangeira"
                        },
                        new
                        {
                            Id = new Guid("bfea3dfe-f6ff-4db3-89be-14a70b3d1839"),
                            Descricao = "Estabelecimento, no Brasil, de Empresa Binacional Argentino-Brasileira"
                        },
                        new
                        {
                            Id = new Guid("92ad4d63-9efe-4486-b7e2-d71d3a869f0c"),
                            Descricao = "Empresa Domiciliada no Exterior"
                        },
                        new
                        {
                            Id = new Guid("269a2852-21bc-4483-9d75-29172f53f191"),
                            Descricao = "Clube/Fundo de Investimento"
                        },
                        new
                        {
                            Id = new Guid("68490f47-b627-4e21-9669-a13104585365"),
                            Descricao = "Sociedade Simples Pura"
                        },
                        new
                        {
                            Id = new Guid("2411e352-269c-46ef-9f3e-1bfa3b1ea8f5"),
                            Descricao = "Sociedade Simples Limitada"
                        },
                        new
                        {
                            Id = new Guid("a3f37a9c-b62e-4ef9-afff-09800893cea6"),
                            Descricao = "Sociedade Simples em Nome Coletivo"
                        },
                        new
                        {
                            Id = new Guid("28c125bc-5b45-4ecc-a3e0-249100c06fa5"),
                            Descricao = "Sociedade Simples em Comandita Simples"
                        },
                        new
                        {
                            Id = new Guid("05b22fb4-682a-43d8-8359-02dbfa263326"),
                            Descricao = "Empresa Binacional"
                        },
                        new
                        {
                            Id = new Guid("b161d5a1-2708-450b-b4f0-efde0f914061"),
                            Descricao = "Consórcio de Empregadores"
                        },
                        new
                        {
                            Id = new Guid("cc79b38b-247b-437a-b443-b1c3f64c4246"),
                            Descricao = "Consórcio Simples"
                        },
                        new
                        {
                            Id = new Guid("4700e739-637b-491e-9aca-39a0bec301f0"),
                            Descricao = "Empresa Individual de Responsabilidade Limitada (de Natureza Empresária)"
                        },
                        new
                        {
                            Id = new Guid("a957a2f4-a744-47ad-98c1-1295a21daf25"),
                            Descricao = "Empresa Individual de Responsabilidade Limitada (de Natureza Simples)"
                        },
                        new
                        {
                            Id = new Guid("56f3ff63-1deb-4264-9aa9-a83aa1c42a54"),
                            Descricao = "Sociedade Unipessoal de Advogados"
                        },
                        new
                        {
                            Id = new Guid("163a9ff9-44b5-4d96-ba66-9fb6f78e628b"),
                            Descricao = "Cooperativas de Consumo"
                        },
                        new
                        {
                            Id = new Guid("21971845-cec6-40d3-b280-bfa026ae0b12"),
                            Descricao = "Empresa Simples de Inovação - Inova Simples"
                        },
                        new
                        {
                            Id = new Guid("319a3f60-8a9e-4668-8f2c-bf079d20de70"),
                            Descricao = "Investidor Não Residente"
                        },
                        new
                        {
                            Id = new Guid("cc0804db-7bfe-4b62-b422-248d56eb0f13"),
                            Descricao = "Serviço Notarial e Registral (Cartório)"
                        },
                        new
                        {
                            Id = new Guid("9e6a7356-ac04-4383-a40b-6988e95a179c"),
                            Descricao = "Fundação Privada"
                        },
                        new
                        {
                            Id = new Guid("e272ce0f-29e2-4a30-9082-5554ed0040e1"),
                            Descricao = "Serviço Social Autônomo"
                        },
                        new
                        {
                            Id = new Guid("bb76bf45-3354-46e2-9b9a-eb6ed05dfd4d"),
                            Descricao = "Condomínio Edilício"
                        },
                        new
                        {
                            Id = new Guid("46a35d1c-720b-403e-94d3-70a4dada94bb"),
                            Descricao = "Comissão de Conciliação Prévia"
                        },
                        new
                        {
                            Id = new Guid("d7565c27-6763-4e6d-942f-32753d6bfe89"),
                            Descricao = "Entidade de Mediação e Arbitragem"
                        },
                        new
                        {
                            Id = new Guid("fe85f277-65bb-4c4e-9344-2e7ba811b752"),
                            Descricao = "Entidade Sindical"
                        },
                        new
                        {
                            Id = new Guid("90a4cd32-5f1f-4ded-a285-f9d549372cc6"),
                            Descricao = "Estabelecimento, no Brasil, de Fundação ou Associação Estrangeiras"
                        },
                        new
                        {
                            Id = new Guid("7c515124-9d3b-46e5-9a99-7024b5270918"),
                            Descricao = "Fundação ou Associação Domiciliada no Exterior"
                        },
                        new
                        {
                            Id = new Guid("5c97f3fc-804c-453b-bb04-7b3402eb12bf"),
                            Descricao = "Organização Religiosa"
                        },
                        new
                        {
                            Id = new Guid("9842c97c-a930-4c87-ab71-c582dbd4802f"),
                            Descricao = "Comunidade Indígena"
                        },
                        new
                        {
                            Id = new Guid("764ca754-54d3-447a-8976-6e05d3d6d55a"),
                            Descricao = "Fundo Privado"
                        },
                        new
                        {
                            Id = new Guid("a483bc25-f85b-44c3-bb3e-bbfceda0050c"),
                            Descricao = "Órgão de Direção Nacional de Partido Político"
                        },
                        new
                        {
                            Id = new Guid("3767dffe-761f-4f17-8f47-283d69ab2086"),
                            Descricao = "Órgão de Direção Regional de Partido Político"
                        },
                        new
                        {
                            Id = new Guid("986dc3f6-7423-46b2-995a-dc9100d06b80"),
                            Descricao = "Órgão de Direção Local de Partido Político"
                        },
                        new
                        {
                            Id = new Guid("96ba3a34-3174-4d27-81f9-55eedbeb0021"),
                            Descricao = "Comitê Financeiro de Partido Político"
                        },
                        new
                        {
                            Id = new Guid("d39370b9-abb4-448d-89d3-6d78412520d2"),
                            Descricao = "Frente Plebiscitária ou Referendária"
                        },
                        new
                        {
                            Id = new Guid("0c782749-d321-46ba-80b4-3cfaa72104a7"),
                            Descricao = "Organização Social (OS)"
                        },
                        new
                        {
                            Id = new Guid("6238d6cf-94b6-4dd0-8d89-0cc21157242a"),
                            Descricao = "Demais Condomínios"
                        },
                        new
                        {
                            Id = new Guid("9dec824d-2471-433d-a3cc-9bfbe6d90519"),
                            Descricao = "Plano de Benefícios de Previdência Complementar Fechada"
                        },
                        new
                        {
                            Id = new Guid("47610fa3-be72-4e0a-9f11-1200b3700595"),
                            Descricao = "Associação Privada"
                        },
                        new
                        {
                            Id = new Guid("d627523c-2095-4dc9-a038-6c3504ee627f"),
                            Descricao = "Empresa Individual Imobiliária"
                        },
                        new
                        {
                            Id = new Guid("357f783c-4dd3-47e1-9883-b29a1116909a"),
                            Descricao = "Segurado Especial"
                        },
                        new
                        {
                            Id = new Guid("2d69da97-ab08-4f4f-bca7-f06ab993d413"),
                            Descricao = "Contribuinte individual"
                        },
                        new
                        {
                            Id = new Guid("b994f785-1dfc-4597-908c-5eb60cf86cfa"),
                            Descricao = "Candidato a Cargo Político Eletivo"
                        },
                        new
                        {
                            Id = new Guid("d1f84d86-83de-4cd7-aa07-8fb8bb58315f"),
                            Descricao = "Leiloeiro"
                        },
                        new
                        {
                            Id = new Guid("4778c548-05b5-4e1d-b0ca-da6088ddc036"),
                            Descricao = "Produtor Rural (Pessoa Física)"
                        });
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.PropostaValor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescricaoNegocio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FazerNegocio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("PropostaValor", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.RedeSocial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("URLPerfil")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("RedeSocial", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.RelacionamentoCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PropostaValorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropostaValorId");

                    b.ToTable("RelacionamentoCliente", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoAjudarPessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SegmentoClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SegmentoClienteId");

                    b.ToTable("SegmentoAjudarPessoa", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoBuscarEmpresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SegmentoClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SegmentoClienteId");

                    b.ToTable("SegmentoBuscarEmpresa", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ajudar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BuscarProduto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ClienteDispostoPagar")
                        .HasColumnType("int");

                    b.Property<Guid>("PropostaValorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServindoPessoa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PropostaValorId");

                    b.ToTable("SegmentoCliente", (string)null);
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoReclamacaoAtendimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SegmentoClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SegmentoClienteId");

                    b.ToTable("SegmentoReclamacaoAtendimento", (string)null);
                });

            modelBuilder.Entity("CanalDistribuicaoOpcaoPropostaValor", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.CanalDistribuicaoOpcao", null)
                        .WithMany()
                        .HasForeignKey("CanalDistribuicaoOpcaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projetox.Domain.Core.Entidades.PropostaValor", null)
                        .WithMany()
                        .HasForeignKey("PropostaValorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsuarioEmpresa", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.Empresa", null)
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projetox.Domain.Autenticacao.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projetox.Domain.Autenticacao.Entidades.Usuario", b =>
                {
                    b.OwnsOne("projetox.Domain.Base.ValueObjects.Documento", "Documento", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("projetox.Domain.Core.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("projetox.Domain.Autenticacao.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Confirmado")
                                .HasColumnType("bit");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("projetox.Domain.Autenticacao.ValueObjects.Nome", "Nome", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("PrimeiroNome")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Sobrenome")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("projetox.Domain.Autenticacao.ValueObjects.Senha", "Senha", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("Documento")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Nome")
                        .IsRequired();

                    b.Navigation("Senha")
                        .IsRequired();

                    b.Navigation("Telefone")
                        .IsRequired();
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.CanalDistribuicao", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.CanalDistribuicaoOpcao", "CanalDistribuicaoOpcao")
                        .WithMany("CanaisDistribuicao")
                        .HasForeignKey("CanalDistribuicaoOpcaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projetox.Domain.Core.Entidades.SegmentoCliente", "SegmentoCliente")
                        .WithMany()
                        .HasForeignKey("SegmentoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CanalDistribuicaoOpcao");

                    b.Navigation("SegmentoCliente");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.Empresa", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.NaturezaJuridica", "NaturezaJuridica")
                        .WithMany("Empresas")
                        .HasForeignKey("NaturezaJuridicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("projetox.Domain.Base.ValueObjects.Documento", "Documento", b1 =>
                        {
                            b1.Property<Guid>("EmpresaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("Empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.OwnsOne("projetox.Domain.Core.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("EmpresaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("Empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.OwnsOne("projetox.Domain.Core.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("EmpresaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("CEP")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("CodIBGE")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("Complemento")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("Empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.Navigation("Documento")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("NaturezaJuridica");

                    b.Navigation("Telefone")
                        .IsRequired();
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.FonteReceita", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.PropostaValor", "PropostaValor")
                        .WithMany("FontesReceita")
                        .HasForeignKey("PropostaValorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropostaValor");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.PropostaValor", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.Empresa", "Empresa")
                        .WithMany("PropostasValor")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.RedeSocial", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.Empresa", "Empresa")
                        .WithMany("RedesSociais")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.RelacionamentoCliente", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.PropostaValor", "PropostaValor")
                        .WithMany("RelacionamentoClientes")
                        .HasForeignKey("PropostaValorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropostaValor");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoAjudarPessoa", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.SegmentoCliente", "SegmentoCliente")
                        .WithMany("SegmentoAjudarPessoas")
                        .HasForeignKey("SegmentoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SegmentoCliente");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoBuscarEmpresa", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.SegmentoCliente", "SegmentoCliente")
                        .WithMany("SegmentoBuscarEmpresas")
                        .HasForeignKey("SegmentoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SegmentoCliente");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoCliente", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.PropostaValor", "PropostaValor")
                        .WithMany("SegmentosClientes")
                        .HasForeignKey("PropostaValorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("projetox.Domain.Core.ValueObjects.Monetario", "Valor", b1 =>
                        {
                            b1.Property<Guid>("SegmentoClienteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("SegmentoClienteId");

                            b1.ToTable("SegmentoCliente");

                            b1.WithOwner()
                                .HasForeignKey("SegmentoClienteId");
                        });

                    b.Navigation("PropostaValor");

                    b.Navigation("Valor")
                        .IsRequired();
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoReclamacaoAtendimento", b =>
                {
                    b.HasOne("projetox.Domain.Core.Entidades.SegmentoCliente", "SegmentoCliente")
                        .WithMany("SegmentoReclamacaoAtendimentos")
                        .HasForeignKey("SegmentoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SegmentoCliente");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.CanalDistribuicaoOpcao", b =>
                {
                    b.Navigation("CanaisDistribuicao");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.Empresa", b =>
                {
                    b.Navigation("PropostasValor");

                    b.Navigation("RedesSociais");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.NaturezaJuridica", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.PropostaValor", b =>
                {
                    b.Navigation("FontesReceita");

                    b.Navigation("RelacionamentoClientes");

                    b.Navigation("SegmentosClientes");
                });

            modelBuilder.Entity("projetox.Domain.Core.Entidades.SegmentoCliente", b =>
                {
                    b.Navigation("SegmentoAjudarPessoas");

                    b.Navigation("SegmentoBuscarEmpresas");

                    b.Navigation("SegmentoReclamacaoAtendimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
